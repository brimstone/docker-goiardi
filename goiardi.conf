# A sample goiardi config file, with nonsense entries to get the point across

# IP address to listen on. Set to "0.0.0.0" to listen on all interfaces
ipaddress = "0.0.0.0"

# TCP port to listen on
port = 80

# Hostname goiardi should use. Used for sending links to resources back to the
# client
#hostname = "goiardi"

# Where to send log data instead of stdout
#log-file = "/tmp/goiardi.log"

# Or log to syslog. log-file, syslog, or neither can be used, but you cannot use
# both.
syslog = false

# Log level. Options are "debug", "info", "warning", "error", and "critical".
# May be specified on the command line with one or more -V flags.
log-level = "info"

# If these two options are both set, goiardi will save the data store and index
# data to disk. It will cause an error to only set one of the options
index-file = "/etc/goiardi/index.bin"
data-file = "/etc/goiardi/data.bin"

# How often to save the index and data files from the background. Not
# particularly useful without setting index-file and data-file
freeze-interval = 120

# Use the faster, but less safe, old method of storing data in the in-memory data
# store with pointers, rather than encoding the data with gob and giving a new 
# copy of the object to each requestor. If this is enabled goiardi will run 
# faster in in-memory mode, but one goroutine could change an object while it's 
# being used by another. Has no effect when using an SQL backend.
# use-unsafe-mem-store = false

# Time slew: the time difference allowed between the server's clock and the time
# in the X-Ops-Timestamp header. Formatted like 5m, 150s, etc. Defaults to 15m.
time-slew = "15m"

# Conf root: root directory for configs and certificates. Default: the directory
# the config file is in, or the current directory if no config file is setl
# conf-root = "/etc/goiardi"

# Use auth: Use authentication? If this is set to true, clients will have to 
# be created on the server and have proper keys (which is the normal chef-server
# behavior). If it is not set, no authentication checks are performed. This is
# how chef-zero behaves, and goiardi's only mode previously. Defaults to false.
use-auth = true

# Use SSL: Use SSL for connections to the server. Defaults to false. If set to
# true, ssl-cert and ssl-key must be set. If the port is set to 80, this will
# be forced to false. If port is set to 443, it will be forced to true.
use-ssl = false

# SSL certificate file. If a relative path, it will be set relative to
# conf-root.
# ssl-cert="/path/to/goiardi/conf/cert.pem"

# SSL key file. If a relative path, it will be set relative to conf-root.
# ssl-key="/path/to/goiardi/conf/key.pem"

# HTTPS urls: If true, URLs generated by the server will use 'https://'. Useful
# when goiardi is sitting behind a reverse proxy that uses SSL, but is 
# communicating with the proxy over HTTP.
https-urls = false

# Disable webui: If true, connections and logins from the webui interface will
# not be allowed.
disable-webui = false

# Log events. Keep track of changes to chef objects by logging events that
# change them. They are accessible through the /events endpoint.
log-events = true

# How many log events to keep. If set, will periodically purge logged events to
# keep the number of events stored to this number.
#log-event-keep = 1000

# Maximum object size in bytes for the file store. Default 10485760 bytes (10MB).
#obj-max-size = 10485760

# Maximum size for a JSON request from the client. Default is 1000000.
#json-req-max-size = 1000000

# MySQL options. If "use-mysql" is true on the command line or in the
# configuration file, connect to mysql with the options in [mysql]. All of the
# MySQL options must be strings.
use-mysql = false

# Local directory for storing cookbook files on the filesystem. Optional in 
# in-memory mode (standard behavior is to keep the files in memory), and
# mandatory for SQL mode.
# local-filestore-dir = "/var/goiardi/file_checksums"

#[mysql]
#	username = "foo" # technically optional, although you probably want it
#	password = "s3kr1t" # optional, if you have no password set for MySQL
#	protocol = "tcp" # optional, but set to "unix" for connecting to MySQL
#			 # through a Unix socket.
#	address = "localhost"
#	port = "3306" # optional, defaults to 3306. Not used with sockets.
#	dbname = "goiardi_test"
#	# See https://github.com/go-sql-driver/mysql#parameters for an
#	# explanation of available parameters
#	[mysql.extra_params]
#		tls = "false"
#		foo = "bar"
#
use-postgres = false

# PostgreSQL options. If "use-postgres" is set to true on the command line or in
# the configuration file, connect to postgres with the options in [postgres].
# These options are all strings. See 
# http://godoc.org/github.com/lib/pq#hdr-Connection_String_Parameters for details
# on the connection parameters. All of these parameters are technically optional,
# although chances are pretty good that you'd want to set at least some of them.
#[postgresql]
#	username = "foo"
#	password = "s3kr1t"
#	host = "localhost"
#	port = "5432"
#	dbname = "mydb"
#	sslmode = "disable"
